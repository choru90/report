plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
}

group = 'net.huray.project_name' /* FIXME STEP1 - 프로젝트명 */
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.1")
    set('junitJupiterVersion', "5.8.2")
    set('queryDslVersion', "5.0.0")
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}

// 생성된 문서를 jar 파일에 패키징하는 설정
bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.6.7'
    implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

    developmentOnly 'org.springframework.boot:spring-boot-devtools:2.6.7'

    /* -- 기타 -- */
    // 미분류
    implementation 'org.glassfish.jaxb:jaxb-runtime'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    /* -- Database -- */
    // dbdriver FIXME STEP4 - 데이터베이스
    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.5'
    /* runtimeOnly 'com.h2database:h2' // TODO H2 필요시 사용 */

    // flyway 마이그레이션 관리
    implementation 'org.flywaydb:flyway-core:8.0.5'

    // QueryDsl
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")  // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"


    /* -- micrometer & prometheus -- */
    implementation 'io.micrometer:micrometer-registry-prometheus:1.8.4'

    /* -- log4j & 취약점 버전명시 -- */
    implementation 'ch.qos.logback:logback-core:1.2.10'
    implementation 'ch.qos.logback:logback-classic:1.2.10'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:jul-to-slf4j:1.7.32'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'

    /* -- API 문서 -- */
    // rest doc
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // swagger TODO - TBD

    /* -- Unit Test -- */
    testImplementation('org.springframework.boot:spring-boot-starter-test:2.6.7') {
        exclude module: 'junit'
    }
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

/* querydsl setting */
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
